/**
 * @fileoverview SEO Code Generation
 * @description Generate SEO-aware code for collections with SEO fields
 */

import type { CollectionMetadata } from '../utils/fieldAnalyzer.js';

/**
 * Generate SEO utilities for a collection
 */
export function generateSEOUtilities(collection: CollectionMetadata): string {
  const collectionName = collection.displayName;
  const collectionSlug = collection.slug;
  const hasSeo = collection.hasSEO;

  if (!hasSeo) {
    return '';
  }

  return `
/**
 * SEO utilities for ${collectionName} collection
 * Auto-generated by Collection Registry
 */

import { generateSEO, generateMetaTags } from '@alloylab/seo';
import type { ${collectionName}, SiteSettings } from './types';

/**
 * Generate SEO data for ${collectionSlug}
 */
export function generate${collectionName}SEO(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl?: string
) {
  return generateSEO(
    ${collectionSlug},
    siteSettings,
    'page',
    baseUrl
  );
}

/**
 * Generate meta tags for ${collectionSlug}
 */
export function generate${collectionName}MetaTags(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl?: string
): string {
  const seo = generate${collectionName}SEO(${collectionSlug}, siteSettings, baseUrl);
  return generateMetaTags(seo);
}

/**
 * Generate structured data for ${collectionSlug}
 */
export function generate${collectionName}StructuredData(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl?: string
): string {
  const seo = generate${collectionName}SEO(${collectionSlug}, siteSettings, baseUrl);
  return seo.structuredData || '';
}
`;
}

/**
 * Generate SEO React hooks for a collection
 */
export function generateSEOHooks(collection: CollectionMetadata): string {
  const collectionName = collection.displayName;
  const collectionSlug = collection.slug;
  const hasSeo = collection.hasSEO;

  if (!hasSeo) {
    return '';
  }

  return `
/**
 * SEO React hooks for ${collectionName} collection
 * Auto-generated by Collection Registry
 */

import { useSEO } from '@alloylab/seo';
import type { ${collectionName}, SiteSettings } from './types';

/**
 * Hook for managing ${collectionSlug} SEO
 */
export function use${collectionName}SEO(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl?: string
) {
  return useSEO({
    siteSettings,
    page: ${collectionSlug},
    baseUrl,
    type: 'page'
  });
}
`;
}

/**
 * Generate SEO route utilities for a collection
 */
export function generateSEORoutes(collection: CollectionMetadata): string {
  const collectionName = collection.displayName;
  const collectionSlug = collection.slug;
  const hasSeo = collection.hasSEO;

  if (!hasSeo) {
    return '';
  }

  return `
/**
 * SEO route utilities for ${collectionName} collection
 * Auto-generated by Collection Registry
 */

import { generateSEO, generateMetaTags } from '@alloylab/seo';
import type { ${collectionName}, SiteSettings } from './types';

/**
 * Generate SEO data for ${collectionSlug} route
 */
export async function get${collectionName}SEO(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl: string
) {
  return generateSEO(
    ${collectionSlug},
    siteSettings,
    'page',
    baseUrl
  );
}

/**
 * Generate meta tags for ${collectionSlug} route
 */
export async function get${collectionName}MetaTags(
  ${collectionSlug}: ${collectionName},
  siteSettings: SiteSettings,
  baseUrl: string
): Promise<string> {
  const seo = await get${collectionName}SEO(${collectionSlug}, siteSettings, baseUrl);
  return generateMetaTags(seo);
}
`;
}

/**
 * Generate SEO sitemap utilities for a collection
 */
export function generateSEOSitemap(collection: CollectionMetadata): string {
  const collectionName = collection.displayName;
  const collectionSlug = collection.slug;
  const hasSeo = collection.hasSEO;
  const hasSlug = collection.hasSlug;

  if (!hasSeo || !hasSlug) {
    return '';
  }

  return `
/**
 * SEO sitemap utilities for ${collectionName} collection
 * Auto-generated by Collection Registry
 */

import { generateSitemapUrls } from '@alloylab/seo';
import type { ${collectionName}, SiteSettings } from './types';

/**
 * Generate sitemap URLs for ${collectionSlug} collection
 */
export function generate${collectionName}SitemapUrls(
  ${collectionSlug}s: ${collectionName}[],
  siteSettings: SiteSettings,
  baseUrl: string
) {
  return generateSitemapUrls(
    ${collectionSlug}s,
    siteSettings,
    {
      baseUrl,
      collectionSlug: '${collectionSlug}',
      slugField: 'slug',
      statusField: 'status',
      publishedStatus: 'published'
    }
  );
}
`;
}
